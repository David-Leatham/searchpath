import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import React, { useState, useEffect, useRef } from "react";
import dynamic from "next/dynamic";

import { Block, Board, SearchPath } from '@/lib/types'
import { generateKruskal } from '@/lib/kruskal';
import { useBoardStore } from "./store/boardStore";

import { generatePath } from '@/lib/searchalgorithms/dijkstra';

const inter = Inter({ subsets: ['latin'] })

const Middle = dynamic(() => import('./Middle'), {
  ssr: false
})

const sleep = (ms: number) => new Promise((r) => setTimeout(r, ms));

export default function Home() {
  const boardList: Board = useBoardStore<Board>((state)=>state.board);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.startButtonOuter}>
          <button className={styles.startButtonInner + ' ' + inter.className} onClick={() => {startSeach(boardList)}}>Start</button>
        </div>
        <Middle></Middle>
      </main>
    </>
  )
}

let rotationDeg: number = 90;

async function startSeach(board: Board) {
  let searchpath: SearchPath = generatePath(board)
  for (let index of searchpath.searchList) {
    let elem = document.getElementsByClassName(styles.middle)[0].children.item(index) as HTMLElement
    if (board.boardList[index] == Block.Path) {
      elem.style.background = 'red';
      elem.style.transform = 'rotate(' + rotationDeg + 'deg)';
      await sleep(50)
    }
  }
  for (let index of searchpath.shortestPath) {
    let elem = document.getElementsByClassName(styles.middle)[0].children.item(index) as HTMLElement
    if (board.boardList[index] == Block.Path) {
      elem.style.background = 'yellow';
      elem.style.transform = 'rotate(' + 0 + 'deg)';
      await sleep(50)
    }
  }
  // rotationDeg += 90;
  // elem.style.transition = 'red 1000ms linear';
}